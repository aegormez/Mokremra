https://docplayer.biz.tr/65328274-Elektrik-ve-elektronik-muhendisliginde-sayisal-yontemler-ee-506-ders-detaylari.html


Python Dictionaries
Create and print a dictionary:

thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
print(thisdict)

Get the value of the "model" key:

x = thisdict["model"]

Get the value of the "model" key:

x = thisdict.get("model")

Change the "year" to 2018:
thisdict["year"] = 2018

Print all key names in the dictionary, one by one:

for x in thisdict:
  print(x)
  
Print all values in the dictionary, one by one:

for x in thisdict:
  print(thisdict[x])
  
You can also use the values() function to return values of a dictionary:

for x in thisdict.values():
  print(x)
  
Loop through both keys and values, by using the items() function:

for x, y in thisdict.items():
  print(x, y)
  
Adding an item to the dictionary is done by using a new index key and assigning a value to it:
thisdict["color"] = "red"

The pop() method removes the item with the specified key name:
thisdict.pop("model")

The popitem() method removes the last inserted item (in versions before 3.7, a random item is removed instead):
thisdict.popitem()

The del keyword removes the item with the specified key name:
del thisdict["model"]

It is also possible to use the dict() constructor to make a new dictionary:
thisdict = dict(brand="Ford", model="Mustang", year=1964)
# note that keywords are not string literals
# note the use of equals rather than colon for the assignment
print(thisdict)

Python If.. Else ..
If you have only one statement to execute, you can put it on the same line as the if statement.
if a > b: print("a is greater than b")

If you have only one statement to execute, one for if, and one for else, you can put it all on the same line:
a = 2
b = 330
print("A") if a > b else print("B")


You can also have multiple else statements on the same line:
a = 330
b = 330
print("A") if a > b else print("=") if a == b else print("B")

The and keyword is a logical operator, and is used to combine conditional statements:
a = 200
b = 33
c = 500
if a > b and c > a:
  print("Both conditions are True")
  
if statements cannot be empty, but if you for some reason have an if statement with no content, put in the pass statement 
to avoid getting an error.
a = 33
b = 200

if b > a:
  pass

Python While Loops
With the else statement we can run a block of code once when the condition no longer is true:
i = 1
while i < 6:
  print(i)
  i += 1
else:
  print("i is no longer less than 6")
  
Python For Loops
With the for loop we can execute a set of statements, once for each item in a list, tuple, set etc.

Print each fruit in a fruit list:

fruits = ["apple", "banana", "cherry"]
for x in fruits:
  print(x)
  
Loop through the letters in the word "banana":

for x in "banana":
  print(x)
  
Exit the loop when x is "banana":

fruits = ["apple", "banana", "cherry"]
for x in fruits:
  print(x)
  if x == "banana":
    break

To loop through a set of code a specified number of times, we can use the range() function,

Using the range() function:
Note that range(6) is not the values of 0 to 6, but the values 0 to 5.
for x in range(6):
  print(x)
  
The range() function defaults to increment the sequence by 1, however it is possible to specify the 
increment value by adding a third parameter: range(2, 30, 3):

for x in range(2, 30, 3):
  print(x)

Print all numbers from 0 to 5, and print a message when the loop has ended:
for x in range(6):
  print(x)
else:
  print("Finally finished!")

Python Functions
If you do not know how many arguments that will be passed into your function, add a * before the parameter name in 
the function definition.This way the function will receive a tuple of arguments, and can access the items accordingly

def my_function(*kids):
  print("The youngest child is " + kids[2])

my_function("Emil", "Tobias", "Linus")

You can also send arguments with the key = value syntax.This way the order of the arguments does not matter.
def my_function(child3, child2, child1):
  print("The youngest child is " + child3)

my_function(child1 = "Emil", child2 = "Tobias", child3 = "Linus")

To let a function return a value, use the return statement:
def my_function(x):
  return 5 * x

print(my_function(3))

A lambda function can take any number of arguments, but can only have one expression.
x = lambda a : a + 10
x = lambda a, b : a * b

Python Classes
The __init__() Function
To understand the meaning of classes we have to understand the built-in __init__() function.All classes have a 
function called __init__(), which is always executed when the class is being initiated.
Create a class named Person, use the __init__() function to assign values for name and age:

class Person:
  def __init__(self, name, age):
    self.name = name
    self.age = age
p1 = Person("John", 36)

The self parameter is a reference to the current instance of the class, and is used to access variables that belongs 
to the class.It does not have to be named self , you can call it whatever you like, but it has to be the first para-
meter of any function in the class:
class Person:
  def __init__(mysillyobject, name, age):
    mysillyobject.name = name
    mysillyobject.age = age

  def myfunc(abc):
    print("Hello my name is " + abc.name)

p1 = Person("John", 36)
p1.myfunc()

To create a class that inherits the functionality from another class, send the parent class as a parameter when creating 
the child class:
class Person:
 def __init__(self,fname,lname):
  self.firstName=fname
  self.lastName=lname
 def printname(self):
  print(self.firstName, self.lastName)
x=Person("Ahmet","Görmez")
x.printname()


class Student(Person):
 def __init__(self,fname,lname):
   self.firstName=lname#we change fname with lname so we can observe which init function is taking place
   self.lastName=fname
y=Student("Cem","Koşar")
y.printname()
Use the super() Function
class Student(Person):
  def __init__(self, fname, lname):
    super().__init__(fname, lname)
    
Python Iterators
Lists, tuples, dictionaries, and sets are all iterable objects. They are iterable containers which you can get an 
iterator from.All these objects have a iter() method which is used to get an iterator:

mytuple = ("apple", "banana", "cherry")
myit = iter(mytuple)

print(next(myit))
print(next(myit))
print(next(myit))

Even strings are iterable objects, and can return an iterator:
mystr = "banana"
myit = iter(mystr)

Create a class which is used to create instances of iterators
class MyNumbers:
  def __iter__(self):
    self.a = 1
    return self

  def __next__(self):
    x = self.a
    self.a += 1
    return x

myclass = MyNumbers()
myiter = iter(myclass)

print(next(myiter))
print(next(myiter))
print(next(myiter))
print(next(myiter))
print(next(myiter))

Python Dates
Import the datetime module and display the current date:

import datetime

x = datetime.datetime.now()
print(x)

Return the year and name of weekday:

import datetime
x = datetime.datetime.now()
print(x.year)
print(x.strftime("%A"))
The strftime() Method
The datetime object has a method for formatting date objects into readable strings.The method is called strftime(), 
and takes one parameter, format, to specify the format of the returned string. Display the name of the month:

import datetime
x = datetime.datetime(2018, 6, 1)
print(x.strftime("%B"))

%A	Weekday, full version	    Wednesday
%B	Month name, full version	December
%Y	Year, full version	      2018
%H	Hour 00-23	              17	
%I	Hour 00-12	              05	
%p	AM/PM	                    PM	
%M	Minute 00-59	            41	
%S	Second 00-59	            08

RegEx in Python
When you have imported the re module, you can start using regular expressions:

Search the string to see if it starts with "The" and ends with "Spain":

import re
txt = "The rain in Spain"
x = re.search("^The.*Spain$", txt)

findall	Returns a list containing all matches
search	Returns a Match object if there is a match anywhere in the string
split	  Returns a list where the string has been split at each match
sub	    Replaces one or many matches with a string

Character	Description	              Example	
[]	      A set of characters	      "[a-m]"	
\	        Signals a specialsequence "\d"	
.	        Any character           	"he..o"	
^	        Starts with	              "^hello"	
$	        Ends with	                "world$"	
*	        Zero or more occurrences	"aix*"	
+	        One or more occurrences	  "aix+"	
{}	      Specifiednumberof occur	  "al{2}"	
|	        Either or	                "falls|stays"

User Input
username = input("Enter username:")
print("Username is: " + username)

String format()
Add a placeholder where you want to display the price:

price = 49
txt = "The price is {} dollars"
print(txt.format(price))
