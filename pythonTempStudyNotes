Python Dictionaries
Create and print a dictionary:

thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
print(thisdict)

Get the value of the "model" key:

x = thisdict["model"]

Get the value of the "model" key:

x = thisdict.get("model")

Change the "year" to 2018:
thisdict["year"] = 2018

Print all key names in the dictionary, one by one:

for x in thisdict:
  print(x)
  
Print all values in the dictionary, one by one:

for x in thisdict:
  print(thisdict[x])
  
You can also use the values() function to return values of a dictionary:

for x in thisdict.values():
  print(x)
  
Loop through both keys and values, by using the items() function:

for x, y in thisdict.items():
  print(x, y)
  
Adding an item to the dictionary is done by using a new index key and assigning a value to it:
thisdict["color"] = "red"

The pop() method removes the item with the specified key name:
thisdict.pop("model")

The popitem() method removes the last inserted item (in versions before 3.7, a random item is removed instead):
thisdict.popitem()

The del keyword removes the item with the specified key name:
del thisdict["model"]

It is also possible to use the dict() constructor to make a new dictionary:
thisdict = dict(brand="Ford", model="Mustang", year=1964)
# note that keywords are not string literals
# note the use of equals rather than colon for the assignment
print(thisdict)

Python If.. Else ..
If you have only one statement to execute, you can put it on the same line as the if statement.
if a > b: print("a is greater than b")

If you have only one statement to execute, one for if, and one for else, you can put it all on the same line:
a = 2
b = 330
print("A") if a > b else print("B")


You can also have multiple else statements on the same line:
a = 330
b = 330
print("A") if a > b else print("=") if a == b else print("B")

The and keyword is a logical operator, and is used to combine conditional statements:
a = 200
b = 33
c = 500
if a > b and c > a:
  print("Both conditions are True")
  
if statements cannot be empty, but if you for some reason have an if statement with no content, put in the pass statement 
to avoid getting an error.
a = 33
b = 200

if b > a:
  pass

Python While Loops
With the else statement we can run a block of code once when the condition no longer is true:
i = 1
while i < 6:
  print(i)
  i += 1
else:
  print("i is no longer less than 6")
  
Python For Loops
With the for loop we can execute a set of statements, once for each item in a list, tuple, set etc.

Print each fruit in a fruit list:

fruits = ["apple", "banana", "cherry"]
for x in fruits:
  print(x)
  
Loop through the letters in the word "banana":

for x in "banana":
  print(x)
  
Exit the loop when x is "banana":

fruits = ["apple", "banana", "cherry"]
for x in fruits:
  print(x)
  if x == "banana":
    break

To loop through a set of code a specified number of times, we can use the range() function,

Using the range() function:
Note that range(6) is not the values of 0 to 6, but the values 0 to 5.
for x in range(6):
  print(x)
  
The range() function defaults to increment the sequence by 1, however it is possible to specify the 
increment value by adding a third parameter: range(2, 30, 3):

for x in range(2, 30, 3):
  print(x)

Print all numbers from 0 to 5, and print a message when the loop has ended:
for x in range(6):
  print(x)
else:
  print("Finally finished!")

Python Functions
If you do not know how many arguments that will be passed into your function, add a * before the parameter name in 
the function definition.This way the function will receive a tuple of arguments, and can access the items accordingly

def my_function(*kids):
  print("The youngest child is " + kids[2])

my_function("Emil", "Tobias", "Linus")

You can also send arguments with the key = value syntax.This way the order of the arguments does not matter.
def my_function(child3, child2, child1):
  print("The youngest child is " + child3)

my_function(child1 = "Emil", child2 = "Tobias", child3 = "Linus")

To let a function return a value, use the return statement:
def my_function(x):
  return 5 * x

print(my_function(3))

A lambda function can take any number of arguments, but can only have one expression.
x = lambda a : a + 10
x = lambda a, b : a * b

Python Classes
The __init__() Function
To understand the meaning of classes we have to understand the built-in __init__() function.All classes have a 
function called __init__(), which is always executed when the class is being initiated.
Create a class named Person, use the __init__() function to assign values for name and age:

class Person:
  def __init__(self, name, age):
    self.name = name
    self.age = age
p1 = Person("John", 36)

The self parameter is a reference to the current instance of the class, and is used to access variables that belongs 
to the class.It does not have to be named self , you can call it whatever you like, but it has to be the first para-
meter of any function in the class:
class Person:
  def __init__(mysillyobject, name, age):
    mysillyobject.name = name
    mysillyobject.age = age

  def myfunc(abc):
    print("Hello my name is " + abc.name)

p1 = Person("John", 36)
p1.myfunc()

To create a class that inherits the functionality from another class, send the parent class as a parameter when creating 
the child class:
class Person:
 def __init__(self,fname,lname):
  self.firstName=fname
  self.lastName=lname
 def printname(self):
  print(self.firstName, self.lastName)
x=Person("Ahmet","Görmez")
x.printname()


class Student(Person):
 def __init__(self,fname,lname):
   self.firstName=lname#we change fname with lname so we can observe which init function is taking place
   self.lastName=fname
y=Student("Cem","Koşar")
y.printname()
Use the super() Function
class Student(Person):
  def __init__(self, fname, lname):
    super().__init__(fname, lname)
    
Python Iterators
Lists, tuples, dictionaries, and sets are all iterable objects. They are iterable containers which you can get an 
iterator from.All these objects have a iter() method which is used to get an iterator:

mytuple = ("apple", "banana", "cherry")
myit = iter(mytuple)

print(next(myit))
print(next(myit))
print(next(myit))

Even strings are iterable objects, and can return an iterator:
mystr = "banana"
myit = iter(mystr)

Create a class which is used to create instances of iterators
class MyNumbers:
  def __iter__(self):
    self.a = 1
    return self

  def __next__(self):
    x = self.a
    self.a += 1
    return x

myclass = MyNumbers()
myiter = iter(myclass)

print(next(myiter))
print(next(myiter))
print(next(myiter))
print(next(myiter))
print(next(myiter))

Python Dates
Import the datetime module and display the current date:

import datetime

x = datetime.datetime.now()
print(x)

Return the year and name of weekday:

import datetime
x = datetime.datetime.now()
print(x.year)
print(x.strftime("%A"))
The strftime() Method
The datetime object has a method for formatting date objects into readable strings.The method is called strftime(), 
and takes one parameter, format, to specify the format of the returned string. Display the name of the month:

import datetime
x = datetime.datetime(2018, 6, 1)
print(x.strftime("%B"))

%A	Weekday, full version	    Wednesday
%B	Month name, full version	December
%Y	Year, full version	      2018
%H	Hour 00-23	              17	
%I	Hour 00-12	              05	
%p	AM/PM	                    PM	
%M	Minute 00-59	            41	
%S	Second 00-59	            08

RegEx in Python
When you have imported the re module, you can start using regular expressions:

Search the string to see if it starts with "The" and ends with "Spain":

import re
txt = "The rain in Spain"
x = re.search("^The.*Spain$", txt)

findall	Returns a list containing all matches
search	Returns a Match object if there is a match anywhere in the string
split	  Returns a list where the string has been split at each match
sub	    Replaces one or many matches with a string

Character	Description	              Example	
[]	      A set of characters	      "[a-m]"	
\	        Signals a specialsequence "\d"	
.	        Any character           	"he..o"	
^	        Starts with	              "^hello"	
$	        Ends with	                "world$"	
*	        Zero or more occurrences	"aix*"	
+	        One or more occurrences	  "aix+"	
{}	      Specifiednumberof occur	  "al{2}"	
|	        Either or	                "falls|stays"

User Input
username = input("Enter username:")
print("Username is: " + username)

String format()
Add a placeholder where you want to display the price:

price = 49
txt = "The price is {} dollars"
print(txt.format(price))


What is Standard Deviation?
Standard deviation is a number that describes how spread out the values are.
A low standard deviation means that most of the numbers are close to the mean (average) value.
A high standard deviation means that the values are spread out over a wider range.

speed = [32,111,138,28,59,77,97]
The standard deviation is:
37.85
Meaning that most of the values are within the range of 37.85 from the mean value, which is 77.4.
As you can see, a higher standard deviation indicates that the values are spread out over a wider range.

Variance
Variance is another number that indicates how spread out the values are.
In fact, if you take the square root of the variance, you get the standard variation!
Or the other way around, if you multiply the standard deviation by itself, you get the variance!
To calculate the variance you have to do as follows:
1. Find the mean
2. For each value: find the difference from the mean
3. For each difference: find the square value
4. The variance is the average number of these squared differences

Regression
The term regression is used when you try to find the relationship between variables.
In Machine Learning, and in statistical modeling, that relationship is used to predict the outcome of future events.

Linear Regression
Linear regression uses the relationship between the data-points to draw a straight line through all them.
This line can be used to predict future values.

import matplotlib.pyplot as plt
from scipy import stats

x = [5,7,8,7,2,17,2,9,4,11,12,9,6]
y = [99,86,87,88,111,86,103,87,94,78,77,85,86]

slope, intercept, r, p, std_err = stats.linregress(x, y)

def myfunc(x):
  return slope * x + intercept

mymodel = list(map(myfunc, x))

plt.scatter(x, y)
plt.plot(x, mymodel)
plt.show()

R-Squared
It is important to know how well the relationship between the values of the x-axis and the values of the y-axis is, 
if there are no relationship the linear regression can not be used to predict anything.
The relationship is measured with a value called the r-squared.
The r-squared value ranges from 0 to 1, where 0 means no relationship, and 1 means 100% related.

Polynomial Regression
If your data points clearly will not fit a linear regression (a straight line through all data points), 
it might be ideal for polynomial regression.

Polynomial regression, like linear regression, uses the relationship between the variables x and y to find 
the best way to draw a line through the data points.
import numpy
import matplotlib.pyplot as plt

x = [1,2,3,5,6,7,8,9,10,12,13,14,15,16,18,19,21,22]
y = [100,90,80,60,60,55,60,65,70,70,75,76,78,79,90,99,99,100]

mymodel = numpy.poly1d(numpy.polyfit(x, y, 3))

myline = numpy.linspace(1, 22, 100)

plt.scatter(x, y)
plt.plot(myline, mymodel(myline))
plt.show()

Multiple Regression
Multiple regression is like linear regression, but with more than one independent value, meaning that we try to 
predict a value based on two or more variables.
Car	        Model	        Volume	        Weight	        CO2	
Toyota	    Aygo	        1000	          790	            99
Mitsubishi	Space Star	  1200	          1160	          95
Skoda	      Citigo	      1000	          929	            95
Fiat	      500	          900	            865	            90
Mini	      Cooper	      1500	          1140	          105
VW	        Up!	          1000	          929	            105
Skoda	      Fabia	        1400	          1109	          90
Mercedes	  A-Class	      1500	          1365	          92
Ford	      Fiesta	      1500	          1112	          98
Audi	      A1	          1600	          1150	          99
Hyundai	    I20	          1100	          980	            99
Suzuki    	Swift	        1300	          990	            101
Ford	      Fiesta	      1000	          1112	          99
Honda	      Civic	        1600	          1252	          94

import pandas
from sklearn import linear_model

df = pandas.read_csv("cars.csv")

X = df[['Weight', 'Volume']]
y = df['CO2']

regr = linear_model.LinearRegression()
regr.fit(X, y)

#predict the CO2 emission of a car where the weight is 2300g, and the volume is 1300ccm:
predictedCO2 = regr.predict([[2300, 1300]])

print(predictedCO2)

In Machine Learning we create models to predict the outcome of certain events, like in the previous chapter 
where we predicted the CO2 emission of a car when we knew the weight and engine size.
To measure if the model is good enough, we can use a method called Train/Test.

What is Train/Test?
Train/Test is a method to measure the accuracy of your model.
It is called Train/Test because you split the the data set into two sets: a training set and a testing set.
80% for training, and 20% for testing.

Split Into Train/Test
The training set should be a random selection of 80% of the original data.
The testing set should be the remaining 20%.

import numpy
import matplotlib.pyplot as plt
numpy.random.seed(2)

x = numpy.random.normal(3, 1, 100)
y = numpy.random.normal(150, 40, 100) / x

train_x = x[:80]
train_y = y[:80]

test_x = x[80:]
test_y = y[80:]

mymodel = numpy.poly1d(numpy.polyfit(train_x, train_y, 4))
myline = numpy.linspace(0, 6, 100)
plt.scatter(train_x, train_y)
plt.plot(myline, mymodel(myline))
plt.show()

Making GUI with Python - This part only contains tips about GUI , not the whole topic itself

Set focus to entry widget
That’s super easy, all we need to do is to call focus function like this:
txt.focus()
And when you run your code, you will notice that the entry widget has the focus so you can write your text right away.

Disable entry widget
To disable entry widget, you can set the state property to disabled:
txt = Entry(window,width=10, state='disabled')

Add a combobox widget
To add a combobox widget, you can use the Combobox class from ttk library like this:

from tkinter.ttk import * 
combo = Combobox(window)
combo['values']= (1, 2, 3, 4, 5, "Text")
combo.current(1) #set the selected item

To get the select item, you can use the get function like this:
combo.get()

Adding Checkbox
chk_state = BooleanVar()
chk_state.set(True) #set check state
chk = Checkbutton(window, text='Choose', var=chk_state)

Radio Button
selected = IntVar()
rad1 = Radiobutton(window,text='First', value=1, variable=selected)
rad2 = Radiobutton(window,text='Second', value=2, variable=selected)
rad3 = Radiobutton(window,text='Third', value=3, variable=selected)
def clicked():
   print(selected.get())
btn = Button(window, text="Click Me", command=clicked)
